unsetopt beep

# History
export HISTFILE="${STATE_DIR}/zsh/history"
HISTSIZE=2000
SAVEHIST=1000

# Prompt
PROMPT='%n@%m:%1~ %% '
if [ ! -z "$SSH_CLIENT" ]; then
  PROMPT='%F{green}%n@%m%f:%1~ %% '
fi

# Key bindings
bindkey -e

# Default programs
if command -v vim 1>/dev/null 2>&1; then
  export EDITOR="vim"
  export VISUAL="vim"
fi

if command -v delta 1>/dev/null 2>&1; then
  export GIT_PAGER="delta"
fi

# Disable builtin commands
disable -r time

# Aliases
alias ll='ls -alv'
alias la='ls -A'
alias l='ls -CF'
{{- if eq .chezmoi.os "darwin" }}
alias typora="open -a typora"
{{- end }}

if command -v gojq 1>/dev/null 2>&1; then
  alias jq=gojq
fi

if command -v gojq 1>/dev/null 2>&1; then
  alias http=xh
fi

if command -v wget2 1>/dev/null 2>&1; then
  alias wget=wget2
fi

# FPATH
FUNC_DIRS=(
  "/nix/var/nix/profiles/default/share/zsh/site-functions"
  "${NIX_PROFILE_DIR}/share/zsh/site-functions"
  /usr/share/zsh/site-functions
  /opt/homebrew/share/zsh/site-functions
)
for FUNC_DIR in ${FUNC_DIRS[@]}; do
  FPATH="${FUNC_DIR}:${FPATH}"
done

# Completions
autoload -Uz compinit && compinit -d "${CACHE_DIR}/zsh/zcompdump-${ZSH_VERSION}"
zstyle ':completion:*' cache-path "${CACHE_DIR}/zsh/zcompcache"

# Kafka
if command -v kafka 1>/dev/null 2>&1; then
  source <(kafka completion zsh) && compdef _kafka kafka
fi

# Protogen
if command -v protogen 1>/dev/null 2>&1; then
  source <(protogen completion zsh) && compdef _protogen protogen
fi

# Extensions
# Zoxide
if command -v zoxide 1>/dev/null 2>&1; then
  eval "$(zoxide init zsh)"
fi

# Atuin
if command -v atuin 1>/dev/null 2>&1; then
  eval "$(atuin init zsh)"
fi

# zsh-autosuggestions
if [ -f "${NIX_PROFILE_DIR}/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
  source "${NIX_PROFILE_DIR}/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
fi

# zsh-syntax-highlighting
if [ -f "${NIX_PROFILE_DIR}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
  source "${NIX_PROFILE_DIR}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

# Functions
function proxy_on() {
  export HTTP_PROXY=http://127.0.0.1:7890
  export HTTPS_PROXY=http://127.0.0.1:7890
  export ALL_PROXY=socks5://127.0.0.1:7890
  export http_proxy=http://127.0.0.1:7890
  export https_proxy=http://127.0.0.1:7890
  export all_proxy=socks5://127.0.0.1:7890
}

function proxy_off() {
  unset HTTP_PROXY HTTPS_PROXY ALL_PROXY http_proxy https_proxy all_proxy
}

function ipython() {
  nix-shell -p python3Packages.ipython --command "ipython $@"
}

{{ if eq .chezmoi.os "darwin" -}}
function system_proxy_on() {
  networksetup -setsecurewebproxystate 'Wi-Fi' on
  networksetup -setwebproxystate 'Wi-Fi' on
  networksetup -setsocksfirewallproxystate 'Wi-Fi' on
}

function system_proxy_off() {
  networksetup -setsecurewebproxystate 'Wi-Fi' off
  networksetup -setwebproxystate 'Wi-Fi' off
  networksetup -setsocksfirewallproxystate 'Wi-Fi' off
}

function system_proxy_setup() {
  host="127.0.0.1"
  port="7890"

  if [[ -n "$1" ]]; then
    host=$1
  fi

  if [[ -n "$2" ]]; then
    port=$2
  fi

  networksetup -setsecurewebproxy 'Wi-Fi' "${host}" "${port}"
  networksetup -setwebproxy 'Wi-Fi' "${host}" "${port}"
  networksetup -setsocksfirewallproxy 'Wi-Fi' "${host}" "${port}"
  networksetup -setproxybypassdomains 'Wi-Fi' '*.local' '10.*' '127.0.0.*' '192.168.*' 'example.dev' '*.example.dev'
}

function mitmproxy_setup() {
  host="aarons-nuc.local"
  port="9118"

  if [[ -n "$1" ]]; then
    host=$1
  fi

  if [[ -n "$2" ]]; then
    port=$2
  fi

  networksetup -setsecurewebproxy 'Wi-Fi' "${host}" "${port}"
  networksetup -setwebproxy 'Wi-Fi' "${host}" "${port}"
  networksetup -setsocksfirewallproxy 'Wi-Fi' "${host}" "${port}"
  networksetup -setproxybypassdomains 'Wi-Fi' '*.local' '10.*' '127.0.0.*' '192.168.*' 'example.dev' '*.example.dev'
}

function system_proxy_show() {
  echo "HTTPS Proxy"
  networksetup -getsecurewebproxy 'Wi-Fi'
  echo ""
  echo "HTTP Proxy"
  networksetup -getwebproxy 'Wi-Fi'
  echo ""
  echo "SOCKS Proxy"
  networksetup -getsocksfirewallproxy 'Wi-Fi'
  echo ""
  echo "Proxy Bypass Domains"
  networksetup -getproxybypassdomains 'Wi-Fi'
}

function gonuc() {
  local serial=`system_profiler SPHardwareDataType | grep "Serial Number (system)" | cut -d ":" -f 2 | xargs`
  ssh -t aarons-nuc.local "tmux -CC new -A -s workspace-${serial}"
}

function govm() {
  local serial=`system_profiler SPHardwareDataType | grep "Serial Number (system)" | cut -d ":" -f 2 | xargs`
  ssh -t aarons-work-vm.local "tmux -CC new -A -s workspace-${serial}"
}

function launchctl() {
  case "$1" in
  "reload")
    command launchctl unload "$2" && command launchctl load "$2"
    ;;
  "restart")
    command launchctl stop "$2" && command launchctl start "$2"
    ;;
  *)
    command launchctl "$@"
    ;;
  esac
}

function config-git-user() {
  git config --local user.name "Aaron Jheng"
  git config --local user.email "wentworth@outlook.com"
  git config --local user.signingkey F6A547A869D050A3
}

{{ end -}}
